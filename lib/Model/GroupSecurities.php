<?php
/**
 * GroupSecurities
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MetaTrader microservice
 *
 * MetaTrader microservice. Call <a href='#/paths/~1init~1/get'>/init/</a> to get token, which is required in other methods.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dev4traders.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GroupSecurities Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupSecurities implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Group_securities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trade' => 'int',
        'execution' => 'int',
        'comm_base' => 'float',
        'comm_type' => 'float',
        'comm_lots' => 'float',
        'comm_agent' => 'float',
        'comm_agent_type' => 'int',
        'spread_diff' => 'int',
        'lot_min' => 'int',
        'lot_max' => 'int',
        'lot_step' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trade' => null,
        'execution' => null,
        'comm_base' => null,
        'comm_type' => null,
        'comm_lots' => null,
        'comm_agent' => null,
        'comm_agent_type' => null,
        'spread_diff' => null,
        'lot_min' => null,
        'lot_max' => null,
        'lot_step' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trade' => 'trade',
        'execution' => 'execution',
        'comm_base' => 'comm_base',
        'comm_type' => 'comm_type',
        'comm_lots' => 'comm_lots',
        'comm_agent' => 'comm_agent',
        'comm_agent_type' => 'comm_agent_type',
        'spread_diff' => 'spread_diff',
        'lot_min' => 'lot_min',
        'lot_max' => 'lot_max',
        'lot_step' => 'lot_step'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trade' => 'setTrade',
        'execution' => 'setExecution',
        'comm_base' => 'setCommBase',
        'comm_type' => 'setCommType',
        'comm_lots' => 'setCommLots',
        'comm_agent' => 'setCommAgent',
        'comm_agent_type' => 'setCommAgentType',
        'spread_diff' => 'setSpreadDiff',
        'lot_min' => 'setLotMin',
        'lot_max' => 'setLotMax',
        'lot_step' => 'setLotStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trade' => 'getTrade',
        'execution' => 'getExecution',
        'comm_base' => 'getCommBase',
        'comm_type' => 'getCommType',
        'comm_lots' => 'getCommLots',
        'comm_agent' => 'getCommAgent',
        'comm_agent_type' => 'getCommAgentType',
        'spread_diff' => 'getSpreadDiff',
        'lot_min' => 'getLotMin',
        'lot_max' => 'getLotMax',
        'lot_step' => 'getLotStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trade'] = isset($data['trade']) ? $data['trade'] : null;
        $this->container['execution'] = isset($data['execution']) ? $data['execution'] : null;
        $this->container['comm_base'] = isset($data['comm_base']) ? $data['comm_base'] : null;
        $this->container['comm_type'] = isset($data['comm_type']) ? $data['comm_type'] : null;
        $this->container['comm_lots'] = isset($data['comm_lots']) ? $data['comm_lots'] : null;
        $this->container['comm_agent'] = isset($data['comm_agent']) ? $data['comm_agent'] : null;
        $this->container['comm_agent_type'] = isset($data['comm_agent_type']) ? $data['comm_agent_type'] : null;
        $this->container['spread_diff'] = isset($data['spread_diff']) ? $data['spread_diff'] : null;
        $this->container['lot_min'] = isset($data['lot_min']) ? $data['lot_min'] : null;
        $this->container['lot_max'] = isset($data['lot_max']) ? $data['lot_max'] : null;
        $this->container['lot_step'] = isset($data['lot_step']) ? $data['lot_step'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trade
     *
     * @return int
     */
    public function getTrade()
    {
        return $this->container['trade'];
    }

    /**
     * Sets trade
     *
     * @param int $trade trade
     *
     * @return $this
     */
    public function setTrade($trade)
    {
        $this->container['trade'] = $trade;

        return $this;
    }

    /**
     * Gets execution
     *
     * @return int
     */
    public function getExecution()
    {
        return $this->container['execution'];
    }

    /**
     * Sets execution
     *
     * @param int $execution execution
     *
     * @return $this
     */
    public function setExecution($execution)
    {
        $this->container['execution'] = $execution;

        return $this;
    }

    /**
     * Gets comm_base
     *
     * @return float
     */
    public function getCommBase()
    {
        return $this->container['comm_base'];
    }

    /**
     * Sets comm_base
     *
     * @param float $comm_base comm_base
     *
     * @return $this
     */
    public function setCommBase($comm_base)
    {
        $this->container['comm_base'] = $comm_base;

        return $this;
    }

    /**
     * Gets comm_type
     *
     * @return float
     */
    public function getCommType()
    {
        return $this->container['comm_type'];
    }

    /**
     * Sets comm_type
     *
     * @param float $comm_type comm_type
     *
     * @return $this
     */
    public function setCommType($comm_type)
    {
        $this->container['comm_type'] = $comm_type;

        return $this;
    }

    /**
     * Gets comm_lots
     *
     * @return float
     */
    public function getCommLots()
    {
        return $this->container['comm_lots'];
    }

    /**
     * Sets comm_lots
     *
     * @param float $comm_lots comm_lots
     *
     * @return $this
     */
    public function setCommLots($comm_lots)
    {
        $this->container['comm_lots'] = $comm_lots;

        return $this;
    }

    /**
     * Gets comm_agent
     *
     * @return float
     */
    public function getCommAgent()
    {
        return $this->container['comm_agent'];
    }

    /**
     * Sets comm_agent
     *
     * @param float $comm_agent comm_agent
     *
     * @return $this
     */
    public function setCommAgent($comm_agent)
    {
        $this->container['comm_agent'] = $comm_agent;

        return $this;
    }

    /**
     * Gets comm_agent_type
     *
     * @return int
     */
    public function getCommAgentType()
    {
        return $this->container['comm_agent_type'];
    }

    /**
     * Sets comm_agent_type
     *
     * @param int $comm_agent_type comm_agent_type
     *
     * @return $this
     */
    public function setCommAgentType($comm_agent_type)
    {
        $this->container['comm_agent_type'] = $comm_agent_type;

        return $this;
    }

    /**
     * Gets spread_diff
     *
     * @return int
     */
    public function getSpreadDiff()
    {
        return $this->container['spread_diff'];
    }

    /**
     * Sets spread_diff
     *
     * @param int $spread_diff spread_diff
     *
     * @return $this
     */
    public function setSpreadDiff($spread_diff)
    {
        $this->container['spread_diff'] = $spread_diff;

        return $this;
    }

    /**
     * Gets lot_min
     *
     * @return int
     */
    public function getLotMin()
    {
        return $this->container['lot_min'];
    }

    /**
     * Sets lot_min
     *
     * @param int $lot_min lot_min
     *
     * @return $this
     */
    public function setLotMin($lot_min)
    {
        $this->container['lot_min'] = $lot_min;

        return $this;
    }

    /**
     * Gets lot_max
     *
     * @return int
     */
    public function getLotMax()
    {
        return $this->container['lot_max'];
    }

    /**
     * Sets lot_max
     *
     * @param int $lot_max lot_max
     *
     * @return $this
     */
    public function setLotMax($lot_max)
    {
        $this->container['lot_max'] = $lot_max;

        return $this;
    }

    /**
     * Gets lot_step
     *
     * @return int
     */
    public function getLotStep()
    {
        return $this->container['lot_step'];
    }

    /**
     * Sets lot_step
     *
     * @param int $lot_step lot_step
     *
     * @return $this
     */
    public function setLotStep($lot_step)
    {
        $this->container['lot_step'] = $lot_step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


