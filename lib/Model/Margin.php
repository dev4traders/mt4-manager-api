<?php
/**
 * Margin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MetaTrader microservice
 *
 * MetaTrader microservice. Call <a href='#/paths/~1init~1/get'>/init/</a> to get token, which is required in other methods.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@dev4traders.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.30
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Margin Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Margin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Margin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'balance' => 'float',
        'equity' => 'float',
        'group' => 'string',
        'level_type' => 'int',
        'leverage' => 'int',
        'margin' => 'float',
        'margin_free' => 'float',
        'margin_level' => 'float',
        'margin_type' => 'int',
        'volume' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'balance' => null,
        'equity' => null,
        'group' => null,
        'level_type' => null,
        'leverage' => null,
        'margin' => null,
        'margin_free' => null,
        'margin_level' => null,
        'margin_type' => null,
        'volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'equity' => 'equity',
        'group' => 'group',
        'level_type' => 'level_type',
        'leverage' => 'leverage',
        'margin' => 'margin',
        'margin_free' => 'margin_free',
        'margin_level' => 'margin_level',
        'margin_type' => 'margin_type',
        'volume' => 'volume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'equity' => 'setEquity',
        'group' => 'setGroup',
        'level_type' => 'setLevelType',
        'leverage' => 'setLeverage',
        'margin' => 'setMargin',
        'margin_free' => 'setMarginFree',
        'margin_level' => 'setMarginLevel',
        'margin_type' => 'setMarginType',
        'volume' => 'setVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'equity' => 'getEquity',
        'group' => 'getGroup',
        'level_type' => 'getLevelType',
        'leverage' => 'getLeverage',
        'margin' => 'getMargin',
        'margin_free' => 'getMarginFree',
        'margin_level' => 'getMarginLevel',
        'margin_type' => 'getMarginType',
        'volume' => 'getVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['equity'] = isset($data['equity']) ? $data['equity'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['level_type'] = isset($data['level_type']) ? $data['level_type'] : null;
        $this->container['leverage'] = isset($data['leverage']) ? $data['leverage'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['margin_free'] = isset($data['margin_free']) ? $data['margin_free'] : null;
        $this->container['margin_level'] = isset($data['margin_level']) ? $data['margin_level'] : null;
        $this->container['margin_type'] = isset($data['margin_type']) ? $data['margin_type'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets equity
     *
     * @return float
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param float $equity equity
     *
     * @return $this
     */
    public function setEquity($equity)
    {
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets level_type
     *
     * @return int
     */
    public function getLevelType()
    {
        return $this->container['level_type'];
    }

    /**
     * Sets level_type
     *
     * @param int $level_type level_type
     *
     * @return $this
     */
    public function setLevelType($level_type)
    {
        $this->container['level_type'] = $level_type;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return int
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param int $leverage leverage
     *
     * @return $this
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float $margin margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets margin_free
     *
     * @return float
     */
    public function getMarginFree()
    {
        return $this->container['margin_free'];
    }

    /**
     * Sets margin_free
     *
     * @param float $margin_free margin_free
     *
     * @return $this
     */
    public function setMarginFree($margin_free)
    {
        $this->container['margin_free'] = $margin_free;

        return $this;
    }

    /**
     * Gets margin_level
     *
     * @return float
     */
    public function getMarginLevel()
    {
        return $this->container['margin_level'];
    }

    /**
     * Sets margin_level
     *
     * @param float $margin_level margin_level
     *
     * @return $this
     */
    public function setMarginLevel($margin_level)
    {
        $this->container['margin_level'] = $margin_level;

        return $this;
    }

    /**
     * Gets margin_type
     *
     * @return int
     */
    public function getMarginType()
    {
        return $this->container['margin_type'];
    }

    /**
     * Sets margin_type
     *
     * @param int $margin_type margin_type
     *
     * @return $this
     */
    public function setMarginType($margin_type)
    {
        $this->container['margin_type'] = $margin_type;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return int
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param int $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


